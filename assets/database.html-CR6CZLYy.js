import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as t}from"./app-l-d3v0M7.js";const l={};function e(h,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h2 id="数据库设计" tabindex="-1"><a class="header-anchor" href="#数据库设计"><span>数据库设计</span></a></h2><h3 id="_1-数据完整性" tabindex="-1"><a class="header-anchor" href="#_1-数据完整性"><span>1. 数据完整性</span></a></h3><p>数据完整性是数据库制定的了一些规范，是为了防止用户错误的输入（防止数据库出现错误的数据）</p><ul><li><p><strong>数据库的完整性</strong>：保证存放到数据库中的数据是有效的,</p><p>=&gt; 在创建表时给表中添加约束</p><br></li><li><p><strong>实体完整性</strong>：标识每一行数据不重复</p><p>实体完整性指的是数据库表中存在记录应该不重复出现，是唯一的。</p><p>实体：即表中的一行(一条记录)代表一个实体（entity）</p><p>约束类型：<em>主键约束（primary key）</em>、 <em>唯一约束 (unique)</em> 、 <em>自动增长列 (auto_increment)</em></p><br></li><li><p><strong>域完整性</strong>：限制此单元格的数据正确</p><p>域完整性是指数据库表中的每一个字段都应该有自己的约束。这种约束大多数是数据类型，这句话的意思是表中的每一列都应该有自己的数据类型，还有一些关键字也可以约束。</p><p>域完整性约束：数据类型 、非空约束（not null）、 默认值约束(default）</p><br></li><li><p><strong>引用完整性（参照完整性）</strong>：指外键</p><p>外键约束：FOREIGN KEY</p></li></ul><br><p>常见约束：</p><table><thead><tr><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>null / not null</td><td>字段是否可以为空</td></tr><tr><td>default</td><td>如果一个字段没有值，则使用默认值</td></tr><tr><td>auto_increment</td><td>字段值从1开始，每次递增1，不会重复</td></tr><tr><td>primary key</td><td>定义列为主键</td></tr><tr><td>unique</td><td>唯一键：不能重复，但可以为空</td></tr><tr><td>comment</td><td>注释信息</td></tr></tbody></table><br><p>语法示例：</p><p><strong>主键约束（primary key）</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 在 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 语句中，通过 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 关键字来指定主键</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字段名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">数据类型</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [默认值]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 或者是在定义完所有字段之后指定主键：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[CONSTRAINT &lt;约束名&gt;]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [字段名]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 在创建表时设置联合主键（所谓的联合主键，就是这个主键是由一张表中多个字段组成的）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [字段1，字段2，…,字段n]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 在修改表时添加主键约束</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">数据表名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ADD</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字段名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 删除主键约束</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">数据表名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DROP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>唯一约束 (unique)</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 在创建表时设置唯一约束</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字段名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">数据类型</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> UNIQUE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 在修改表时添加唯一约束</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">数据表名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ADD</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> CONSTRAINT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">唯一约束名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> UNIQUE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">列名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 删除唯一约束</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">表名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DROP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">唯一约束名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>自动增长列 (auto_increment)</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 给字段添加 AUTO_INCREMENT 属性来实现主键自增长</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字段名 数据类型 AUTO_INCREMENT</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 指定自增字段初始值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tb_student2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ID)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)AUTO_INCREMENT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认情况下，AUTO_INCREMENT 的初始值是 1，每新增一条记录，字段值自动加 1。</li><li>一个表中只能有一个字段使用 AUTO_INCREMENT 约束，且该字段必须有唯一索引，以避免序号重复（即为主键或主键的一部分）</li><li>AUTO_INCREMENT 约束的字段必须具备 NOT NULL 属性。</li><li>AUTO_INCREMENT 约束的字段只能是整数类型（TINYINT、SMALLINT、INT、BIGINT 等）。</li><li>AUTO_INCREMENT 约束字段的最大值受该字段的数据类型约束，如果达到上限，AUTO_INCREMENT 就会失效。</li></ul><br><p><strong>外键约束（foreign key）</strong>:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[CONSTRAINT &lt;外键名&gt;]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FOREIGN KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 字段名 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[，字段名2，…]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> REFERENCES</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">主表名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 主键列1 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[，主键列2，…]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#例：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">constraint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fk_score_sid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">foreign key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">references</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student(id) );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 删除外键约束</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">表名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DROP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FOREIGN KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">外键约束名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用外键会影响效率：</p><p>在插入子行的数据的时候，会去父表中查询。在删除父表中的数据的时候，会去子表中查询数据是否被使用。</p><p>在工作中，一般很少使用外键。外键虽然可以保证我们数据的正确性，但是会比较大程度上的影响效率。</p><br><h3 id="_2-三大范式" tabindex="-1"><a class="header-anchor" href="#_2-三大范式"><span>2. 三大范式</span></a></h3><ul><li><p>第一范式：指每一列保持 <span style="color:red;background:yellow;font-size:文字大小;font-family:字体;"><strong>原子性</strong></span>（每一列都是不可分割的基本数据，同一列中不能有多个值）每一个属性不可再分</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 所谓第一范式（1NF)是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	即当实体中的某个属性有多个值时，必须将其拆分为不同的属性。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	在符合第一范式（1NF)表中的每个域值只能是实体的一个属性或一个属性的一部分。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	简而言之，第一范式就是无重复的域。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	需要注意的是，在任何一个关系型数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计时都必须满足第一范式(1NF)。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	不满足1NF的数据库就不是关系数据库。满足1NF的表必须要有主键且每个属性不可再分</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br></li><li><p>第二范式：确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）</p><p>即指记录的<strong>唯一性</strong>。要求数据库表中的每个实例或行必须可以被唯一地区分。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*第二范式（2NF）要求数据库表中的每个实例或行必须可以被唯一地区分。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 为实现区分通常需要为表加上 一个列，以存储各个实例的唯一标识。这个唯一属性列被称为主关键字或主键、主码。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><br></li><li><p>第三范式：属性不依赖于其它非主属性 [ 消除传递依赖 ]。即指<strong>字段不要冗余</strong>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>设R是一个满足第一范式条件的关系模式，X是R的任意属性集，如果X非传递依赖于R的任意一个候选关键字，称R满足第三范式，简记为3NF. </span></span>
<span class="line"><span></span></span>
<span class="line"><span>满足 第三范式（3NF）必须先满足第二范式（2NF）。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><br><p>注：关系实质上是一张二维表，其中每一行是一个元组，每一列是一个属性</p><p>第二范式（2NF）和第三范式（3NF）的概念很容易混淆，区分它们的关键点在于，</p><p>2NF：非主键列是否完全依赖于主键，还是依赖于主键的一部分；</p><p>3NF：非主键列是直接依赖于主键，还是直接依赖于非主键列。</p><br><p>在实际的工作中，要不要去冗余字段呢？</p><blockquote><p>适当的字段冗余可以帮助我们提高查询的效率，但是会影响到增删改的效率。</p><p>那么我们冗余字段需要看具体的业务场景，假如在这个业务场景中，</p><p><span style="color:red;background:yellow;font-size:文字大小;font-family:字体;"><strong>查询的需求远大于增删改的需求，我们可以考虑适当的去冗余数据</strong></span>；</p><p>假如增删改的需求比查询的需求比重要高，那么这个时候就不应该冗余数据。</p><p>冗余字段的设计：反范式化设计。</p></blockquote><br><h3 id="_3-多表设计" tabindex="-1"><a class="header-anchor" href="#_3-多表设计"><span>3. 多表设计</span></a></h3><br><h2 id="事务transaction" tabindex="-1"><a class="header-anchor" href="#事务transaction"><span>事务Transaction</span></a></h2><p><strong>事务（Transaction）</strong>：是由一系列对数据库中数据进⾏访问（查询）与更新（增删改）的操作所组成的⼀个程序执行逻辑单元</p><p>这些操作，要么都成功，要么都不成功。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 事务相关命令：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;                </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 开始，还可以使用下列语法：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">start transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;               </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 提交：使得当前的修改确认</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rollback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 回滚：使得当前的修改被放弃</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_1-事务的acid特性" tabindex="-1"><a class="header-anchor" href="#_1-事务的acid特性"><span>1. 事务的ACID特性</span></a></h3><ul><li><p><strong>原子性（Atomicity）</strong>：事务必须是⼀个原子的操作序列单元</p><p>事务中包含的各项操作在⼀次执⾏过程中，只允许出现两种状态之一：（1）全部执行成功 （2）全部执行失败</p><p>事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。</p><p>事务执⾏过程中出错， 会回滚到事务开始前的状态，所有的操作就像没有发⽣一样。</p><p>也就是说事务是⼀个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。</p><br></li><li><p><strong>⼀致性（Consistency）</strong> ：一个事务在执⾏之前和执行之后，数据库都必须处于⼀致性状态。</p><p>即事务必须是数据库从一个一致性状态到另外一个一致性状态。</p><p>比如：如果从A账户转账到B账户，不可能因为A账户扣了钱，⽽B账户没有加钱（两个账号的总金额要保持一致状态）</p><br></li><li><p><strong>隔离性（Isolation）</strong> ：在并发环境中，并发的事务是互相隔离的。</p><p>也就是说，不同的事务并发操作相同的数据时，每个事务都有各自完整的数据空间。</p><p>⼀个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务是不能互相干扰的。</p><p>在事务中，有隔离级别的定义，不同的隔离级别有不同的影响的程度。</p><br></li><li><p><strong>持久性（Durability）</strong>：事务⼀旦提交后，数据库中的数据必须被永久的保存下来。</p><p>即使服务器系统崩溃或服 务器宕机等故障。只要数据库重新启动，那么一定能够将其恢复到事务成功结束后的状态</p></li></ul><br><h3 id="_2-事务的并发问题" tabindex="-1"><a class="header-anchor" href="#_2-事务的并发问题"><span>2. 事务的并发问题</span></a></h3><p>-- 详情：<a href="https://blog.csdn.net/drizzletowne/article/details/120928779?app_version=4.17.0&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen" target="_blank" rel="noopener noreferrer">MySQL事务并发问题</a></p><ul><li><p><strong>脏读（Dirty Read）</strong>：一个事务读取到了另外一个事务还没提交的数据。</p><p>事务A读取了事务B更新但未提交的数据（脏数据）</p><p><em>脏数据</em>：是指事务对缓冲池中行记录的修改，并且还没有被提交（commit）</p><p>脏读发生的条件是需要事务的隔离级别为 <code>READ UNCOMMITTED</code></p><br></li><li><p><strong>不可重复读（Nonrepeatable Read）</strong>：在同一个事务内，针对同一个数据，前后读取的数据不一样</p><p>可能原因：在同一个事务内，读取到了别的事务修改的数据。如：事务 A 多次读取同一数据，事务 B 在事务A 多次读取的 过程中，对数据做了更新并提交，导致事务A多次读取同一数据时，结果不一致。</p><p><em>不可重复读和脏读的区别</em> 是：脏读是读到未提交的数据，而不可重复读读到的却是已经提交的数据</p><p>有时候，不可重复读的问题是可以接受的，因为其读到的是已经提交的数据，本身并不会带来很大的问题</p><br></li><li><p><strong>幻读（Phantom Read）</strong>：在一个事务内，读取数据记录条数前后不一致 ，</p><p>可能原因：在一个事务内，读取到了别的事务插入（删除）的数据</p><p>即在重复查询的过程中，数据发⽣了量的变化（行数多了或少了）如：</p><ol><li>事务 A 里有一个条件查询的语句 <code>select * from student where age &gt; 10</code>，假设查到了 10 行数据；</li><li>然后事务 B 往里面加入了一批数据 （或者删除了一些数据）</li><li>事务 A 再查的用条件查询语句查询的时候，发现查到了15条 （如果B执行了删除，那么将会少于10条数据）</li></ol></li></ul><br><h3 id="_3-事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#_3-事务的隔离级别"><span>3. 事务的隔离级别</span></a></h3><p>❑ Read Uncommitted（读未提交）：最低的隔离级别，也是唯一能读到脏数据的隔离级别</p><p>❑ Read Committed（读已提交）：只能读取已经提交的数据、解决了脏读问题，但是还是解决不了可重复读问题</p><p>❑ Repeatable Read（可重复读）：保证在事务处理理过程中，多次读取同一个数据时，该数据的值是一致的</p><p>❑ Serializable（顺序读 / 可串行化 / 序列化）：最严格的事务隔离级别、事务只能一个接一个地处理，不能并发</p><br><blockquote><p><span style="color:red;background:yellow;font-size:文字大小;font-family:字体;"><strong>read uncommitted 有脏读、不可重复读、虚幻读的问题</strong></span> 、read uncommitted 是最不安全的隔离级别。</p><p><span style="color:red;background:yellow;font-size:文字大小;font-family:字体;"><strong>read committed 隔离级别没有 脏读的问题，但是有不可重复读和虚幻读的问题。</strong></span></p><p><span style="color:red;background:yellow;font-size:文字大小;font-family:字体;"><strong>repeatable read 没有脏读的问题，没有不可重复读的问题，也没有虚幻读的问题。这个隔离级别也是MySQL默认的隔离级别。</strong></span></p><blockquote><p>说明：只有在MySQL中，repeatable read 这种隔离级别没有虚幻读的问题。因为MySQL的存储引擎InnoDB通过MVCC（多版本并发控制） 解决了可重复读隔离级别下虚幻读的问题。</p></blockquote><p><span style="color:red;background:yellow;font-size:文字大小;font-family:字体;"><strong>串行化这种隔离级别没有 脏读、不可重复读、虚幻读的问题。但是有效率的问题。</strong></span></p><p>串行化这种隔离级别指的是，数据库在这种隔离级别下，会一个事务、一个事务的先后执行，会严格保证事务的先后顺序，不存在多个事务同时执行情况，这种隔离级别没有事务的隔离问题，当然也没有上面的安全性问题。</p></blockquote><br><p>不同事务隔离级别下的不同的问题总结：</p><table><thead><tr><th>隔离级别 \\ 并发问题</th><th style="text-align:center;">脏读</th><th style="text-align:center;">不可重复读</th><th style="text-align:center;">虚幻读</th></tr></thead><tbody><tr><td>read uncommitted</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td>read committed</td><td style="text-align:center;">X</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td>repeatable read</td><td style="text-align:center;">X</td><td style="text-align:center;">X</td><td style="text-align:center;">X(在MySQL下没有)</td></tr><tr><td>serializable</td><td style="text-align:center;">X</td><td style="text-align:center;">X</td><td style="text-align:center;">X</td></tr></tbody></table><br><p><code>InnoDB</code> offers all four transaction isolation levels described by the SQL:1992 standard:</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_read-uncommitted" target="_blank" rel="noopener noreferrer"><code>READ UNCOMMITTED</code></a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_read-committed" target="_blank" rel="noopener noreferrer"><code>READ COMMITTED</code></a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read" target="_blank" rel="noopener noreferrer"><code>REPEATABLE READ</code></a>, and <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_serializable" target="_blank" rel="noopener noreferrer"><code>SERIALIZABLE</code></a>.</p><p>The default isolation level for <code>InnoDB</code> is <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read" target="_blank" rel="noopener noreferrer"><code>REPEATABLE READ</code></a>.</p><p>InnoDB存储引擎默认支持的隔离级别是 <code>REPEATABLE READ</code>，但是与标准SQL不同的是，InnoDB存储引擎在<code>REPEATABLE READ</code>事务隔离级别下，使用 <code>Next-Key Lock </code> 锁的算法，因此避免了幻读的产生</p><p>MySQL数据库中的InnoDB和Falcon存储引擎通过MVCC（Multi-Version Concurrent Control，多版本并发控制）机制解决了可重复读隔离级别下虚幻读的问题。</p><p>需要注意的是，多版本只是解决不可重复读问题，而加上间隙锁（也就是它这里所谓的并发控制）才解决了幻读问题。</p><br>`,68)]))}const k=s(l,[["render",e],["__file","database.html.vue"]]),d=JSON.parse('{"path":"/tool/db/database.html","title":"数据库基础理论","lang":"en-US","frontmatter":{"order":5,"title":"数据库基础理论","description":"数据库设计 1. 数据完整性 数据完整性是数据库制定的了一些规范，是为了防止用户错误的输入（防止数据库出现错误的数据） 数据库的完整性：保证存放到数据库中的数据是有效的, => 在创建表时给表中添加约束 实体完整性：标识每一行数据不重复 实体完整性指的是数据库表中存在记录应该不重复出现，是唯一的。 实体：即表中的一行(一条记录)代表一个实体（entit...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/tool/db/database.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"数据库基础理论"}],["meta",{"property":"og:description","content":"数据库设计 1. 数据完整性 数据完整性是数据库制定的了一些规范，是为了防止用户错误的输入（防止数据库出现错误的数据） 数据库的完整性：保证存放到数据库中的数据是有效的, => 在创建表时给表中添加约束 实体完整性：标识每一行数据不重复 实体完整性指的是数据库表中存在记录应该不重复出现，是唯一的。 实体：即表中的一行(一条记录)代表一个实体（entit..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-22T01:54:16.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-10-22T01:54:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库基础理论\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-22T01:54:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"数据库设计","slug":"数据库设计","link":"#数据库设计","children":[{"level":3,"title":"1. 数据完整性","slug":"_1-数据完整性","link":"#_1-数据完整性","children":[]},{"level":3,"title":"2. 三大范式","slug":"_2-三大范式","link":"#_2-三大范式","children":[]},{"level":3,"title":"3. 多表设计","slug":"_3-多表设计","link":"#_3-多表设计","children":[]}]},{"level":2,"title":"事务Transaction","slug":"事务transaction","link":"#事务transaction","children":[{"level":3,"title":"1. 事务的ACID特性","slug":"_1-事务的acid特性","link":"#_1-事务的acid特性","children":[]},{"level":3,"title":"2. 事务的并发问题","slug":"_2-事务的并发问题","link":"#_2-事务的并发问题","children":[]},{"level":3,"title":"3. 事务的隔离级别","slug":"_3-事务的隔离级别","link":"#_3-事务的隔离级别","children":[]}]}],"git":{"createdTime":1729562056000,"updatedTime":1729562056000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":12.55,"words":3764},"filePathRelative":"tool/db/database.md","localizedDate":"October 22, 2024","autoDesc":true}');export{k as comp,d as data};
