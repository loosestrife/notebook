import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as d,c as h,b as t,d as a,e,a as n,w as l,r as o}from"./app-gzZfiBiD.js";const p={};function c(k,i){const s=o("RouteLink");return d(),h("div",null,[i[10]||(i[10]=t(`<h2 id="java基础知识" tabindex="-1"><a class="header-anchor" href="#java基础知识"><span>Java基础知识</span></a></h2><h3 id="java的优势" tabindex="-1"><a class="header-anchor" href="#java的优势"><span>Java的优势</span></a></h3><p>你认为 Java 的优势是什么？</p><div class="hint-container info"><p class="hint-container-title">Java的优势</p><p>在过去Java因其 <strong>跨平台，垃圾回收，面向对象</strong> 等特点而流行起来，到现在形成了 <mark>成熟的生态</mark> ，拥有完善的工具，框架和中间件，以及大量的专业人才，我觉得这才是Java现如今最大的优势和竞争力。</p></div><h3 id="jdk与jre" tabindex="-1"><a class="header-anchor" href="#jdk与jre"><span>JDK与JRE</span></a></h3><p>JDK 和 JRE 有什么区别？你使用过哪些 JDK 提供的工具？</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><h4 id="jdk与jre的区别" tabindex="-1"><a class="header-anchor" href="#jdk与jre的区别"><span>JDK与JRE的区别</span></a></h4><p>JRE指的是Java运行环境，包含了 <strong>JVM</strong> 及 <strong>核心类库</strong> ，JDK可视为JRE的超集，它包含了JRE 以及其他用于开发和调试的工具</p><h4 id="jdk提供的主要工具" tabindex="-1"><a class="header-anchor" href="#jdk提供的主要工具"><span>JDK提供的主要工具</span></a></h4><ul><li>JDK 常见工具 <ul><li>javac:Java 编译器，负责将 Java 源代码编译成字节码(.class 文件)。</li><li>java:运行 Java 应用程序的命令，使用 JM 来解释并执行编译后的字节码文件。</li><li>javadoc:生成 API文档的工具，能够根据源代码中的注释生成 HTML 格式的文档。</li><li>jar:用于创建和管理 JAR 文件的工具，可以将多个.class 文件打包为单一文件，便于分发和管理</li><li>jdb:Java 调试工具，用于在命令行中调试 Java 应用程序，支持断点设置、变量查看等功能。</li></ul></li><li>性能监控和分析工具 <ul><li>jps:Java 进程工具，显示所有正在运行的 Java 进程，便于监控和诊</li><li><mark>jstack</mark>:生成线程堆栈信息的工具，常用于<strong>分析死锁和线程问题</strong>。</li><li><mark>jmap</mark>:内存映射工具，可以生成堆转储(heap dump)文件，便于<strong>内存泄漏分析和垃圾回收优化</strong>。</li><li><mark>jhat</mark>:堆分析工具，配合 jmap 使用，分析生成的堆转储文件，帮助开发者了解内存使用情况。</li><li>jstat:JVM 统计监控工具，实时监控垃圾回收、内存、类加载等信息，帮助开发者调优 JM 性能。</li><li>jconsole:图形化的 JM 监控工具，可以监控应用程序的内存、线程和类加载情况，常用于监控和调试。</li><li>jvisualvm:功能强大的性能分析工具，支持堆、线程、GC的详细监控，还提供内存分析和 CPU 性能分析。</li></ul></li><li>诊断工具 <ul><li>jinfo:用于查看和修改正在运行的 JVM 参数，便于动态调优和调整 JM 行为,</li><li>jstatd:远程 JVM 监控工具，可以通过网络远程监控 JVM 的状态，适合分布式系统中的性能监控。</li></ul></li></ul></div><h3 id="for-foreach" tabindex="-1"><a class="header-anchor" href="#for-foreach"><span>for/foreach</span></a></h3><p>Java 中 for 循环与 foreach 循环的区别是什么？</p><div class="hint-container info"><p class="hint-container-title">for循环和foreach的区别</p><h4 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach"><span>foreach</span></a></h4><p>foreach是 java5 引入的一种简化的循环结构，常用于遍历 <strong>数组</strong> 或 <strong>实现了Iterable接口的集合</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> fruit </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> fruits) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fruit);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>foreach虽然简洁易用，但不提供对当前索引的访问</li><li>遍历过程中不能修改集合的结构（添加或删除集合元素），否则会抛出并发修改异常<code>ConcurrentModificationException</code></li></ul><h4 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h4><p>for循环则更加灵活，可以控制循环的初始值，终止条件和步进方式。适用于需要通过索引访问元素，或在循环中添加/删除集合中的元素</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] numbers </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> numbers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(numbers[i]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="iterator" tabindex="-1"><a class="header-anchor" href="#iterator"><span>Iterator</span></a></h3><p>什么是 Java 中的迭代器（Iterator）？</p><div class="hint-container warning"><p class="hint-container-title">Iterator迭代器</p><p>Iterator是Java集合框架中用于遍历集合元素的接口，迭代器是的遍历不同类型的集合更加简洁，统一，提升了代码的可读性。在遍历过程中还可以添加或删除元素。比如：<code>iterator.remove()</code></p><ul><li><p>Iterator 迭代器采用的是 快速失败（fail-fast）机制，一旦使用非Iterator的方法或其他线程修改了集合，就会导致集合的<code>modCount</code>和 Iterator的<code>expectedModCount</code>不相等，将引发<code>ConcurrentModificationException</code>异常</p></li><li><p>对集合使用foreach循环，本质上也是Iterator，同样不能随意修改。对数组使用foreach则会被编译成为传统的for循环</p></li></ul><p>List专门提供了ListIterator方法，其返回值是一个Iterator的子接口，最明显的特点就是支持双向遍历(<code>hasPrevious</code>和<code>previous</code>)</p></div>`,13)),a("p",null,[i[1]||(i[1]=e("关于集合 迭代器，及其与Foreach的关系参照：")),n(s,{to:"/java/syntax/base/collection.html#_1-iterator"},{default:l(()=>i[0]||(i[0]=[e("Iterator")])),_:1})]),i[11]||(i[11]=a("h3",{id:"参数传递",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#参数传递"},[a("span",null,"参数传递")])],-1)),i[12]||(i[12]=a("p",null,"Java 中的参数传递是按值还是按引用？",-1)),i[13]||(i[13]=a("div",{class:"hint-container tip"},[a("p",{class:"hint-container-title"},"值传递（pass by value）和引用传递（pass by reference）"),a("p",null,[e("在Java中，无论是基本类型还是引用类型的数据，参数传递都只有 "),a("strong",null,"值传递（pass by value）")]),a("ul",null,[a("li",null,"传递基本类型的参数时，传递的是值的副本。不会影响到原本的值。"),a("li",null,"传递引用数据类型时，传递的是引用的副本，使得方法参数和原本的变量均指向同一对象，因此可以修改对象的属性，但是无法让原本的变量指向其他对象。")])],-1)),a("p",null,[i[3]||(i[3]=e("更详细的内容参照：")),n(s,{to:"/java/syntax/base/Java%E5%9F%BA%E7%A1%80.html#%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92"},{default:l(()=>i[2]||(i[2]=[e("Java参数传递")])),_:1})]),i[14]||(i[14]=t('<h2 id="java数据类型" tabindex="-1"><a class="header-anchor" href="#java数据类型"><span>Java数据类型</span></a></h2><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h3><p>Java 中的基本数据类型有哪些？</p><div class="hint-container info"><p class="hint-container-title">基本数据类型(Primitive Types)</p><p>Java中有8中基本数据类型:</p><p>整型（byte,short,int,long）, 浮点型(float,double), 字符型(char), 布尔型(boolean)</p></div>',4)),a("p",null,[i[5]||(i[5]=e("更多更详细的内容参照：")),n(s,{to:"/java/syntax/base/Java%E5%9F%BA%E7%A1%80.html#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"},{default:l(()=>i[4]||(i[4]=[e("Java基本数据类型")])),_:1})]),i[15]||(i[15]=t(`<h3 id="包装类型" tabindex="-1"><a class="header-anchor" href="#包装类型"><span>包装类型</span></a></h3><p>Java 中包装类型和基本类型的区别是什么？</p><table><thead><tr><th>特征</th><th>基本类型变量（Primitive Types）</th><th>包装类型变量（Wrapper Types）</th></tr></thead><tbody><tr><td><strong>数据类型</strong></td><td><code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, <code>char</code>, <code>boolean</code></td><td><code>Byte</code>, <code>Short</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, <code>Double</code>, <code>Character</code>, <code>Boolean</code></td></tr><tr><td><strong>存储方式</strong></td><td>直接存储值</td><td>存储对象的引用</td></tr><tr><td><strong>内存位置</strong></td><td>局部变量：栈内存；成员变量：堆内存</td><td>局部变量：栈内存（引用），对象：堆内存</td></tr><tr><td><strong>默认值</strong></td><td>局部变量必须初始化；成员变量有默认值（如 <code>int</code> 默认值为 0）</td><td>局部变量和成员变量的默认值都是 <code>null</code></td></tr><tr><td><strong>空值支持</strong></td><td>不能为 <code>null</code></td><td>可以为 <code>null</code></td></tr><tr><td><strong>性能</strong></td><td>无对象开销，性能更高</td><td>存在对象开销，性能略低</td></tr><tr><td><strong>方法和属性</strong></td><td>没有方法和属性</td><td>可以调用方法和属性，如 <code>Integer.toString()</code></td></tr><tr><td><strong>自动装箱和拆箱</strong></td><td>不支持</td><td>支持自动装箱和拆箱</td></tr><tr><td><strong>内存占用</strong></td><td>固定内存大小，如 <code>int</code> 占用 4 个字节</td><td>包括对象头和引用，内存占用更大</td></tr><tr><td><strong>适用场景</strong></td><td>性能要求高、不需要对象特性的场景</td><td>需要对象特性、支持 <code>null</code> 值、需要调用方法的场景</td></tr></tbody></table><h3 id="装箱和拆箱" tabindex="-1"><a class="header-anchor" href="#装箱和拆箱"><span>装箱和拆箱</span></a></h3><p>什么是 Java 中的自动装箱和拆箱？</p><div class="hint-container tip"><p class="hint-container-title">自动装箱（Autoboxing）和拆箱（Unboxing）</p><h4 id="自动装箱-autoboxing" tabindex="-1"><a class="header-anchor" href="#自动装箱-autoboxing"><span>自动装箱（Autoboxing）</span></a></h4><p><strong>定义</strong>：将基本类型自动转换为其对应的包装类型的过程。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> primitiveInt </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> wrapperInt </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> primitiveInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 自动装箱</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当遇到将基本类型赋值给包装类型的情况时，编译器会自动调用 <code>Integer.valueOf(int)</code></p><h4 id="拆箱-unboxing" tabindex="-1"><a class="header-anchor" href="#拆箱-unboxing"><span>拆箱（Unboxing）</span></a></h4><p><strong>定义</strong>：将包装类型自动转换为其对应的基本类型的过程。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> wrapperInt </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> primitiveInt </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> wrapperInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 拆箱</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当编译器遇到将包装类型赋值给基本类型的情况时，会自动插入相应的解包方法调用。如：<code>Integer.intValue()</code></p><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><ol><li><p><strong>性能问题</strong>： 自动装箱和拆箱涉及对象的创建和方法调用，可能会带来性能开销。在性能敏感的应用中，应尽量避免频繁的自动装箱和拆箱操作。</p></li><li><p><strong>空指针异常</strong>： 拆箱时，如果包装类型变量为 <code>null</code>，会抛出 <code>NullPointerException</code>。因此，在拆箱之前应确保包装类型变量不为 <code>null</code>。</p></li><li><p><strong>缓存机制</strong>：<code>Integer</code> 类在 <code>-128</code> 到 <code>127</code> 范围内的值会进行缓存，多次创建相同值的 <code>Integer</code> 对象会返回同一个对象。</p></li></ol></div><h3 id="integer缓存池" tabindex="-1"><a class="header-anchor" href="#integer缓存池"><span>Integer缓存池</span></a></h3><p>什么是 Java 的 Integer 缓存池？</p><p><code>Integer</code> 类的内部实现中使用了一个静态数组来存储这些常用的小整数值(-128 到 127)，以减少对象的创建和垃圾回收的开销。</p><div class="hint-container info"><p class="hint-container-title">缓存池的工作原理</p><p><code>Integer</code> 缓存池的具体实现位于 <code>Integer</code> 类的 <code>IntegerCache</code> 内部类中。</p><ol><li><p><strong>缓存范围</strong>：默认情况下，<code>Integer</code> 缓存池的范围是从 <code>-128</code> 到 <code>127</code>。<br> 这个范围可以通过 JVM 参数 <code>-Djava.lang.Integer.IntegerCache.high=&lt;N&gt;</code> 进行调整，但最低值仍然是 <code>-128</code>。Java 9 及以后的版本中引入了：<code>-XX:AutoBoxCacheMax</code>, 更加直观易用</p></li><li><p><strong>缓存数组及其初始化</strong>：<code>IntegerCache</code> 类中有一个静态数组 <code>cache</code>，用于存储这个范围内的 <code>Integer</code> 对象。在 <code>IntegerCache</code> 类的静态初始化块中，会根据配置的范围创建并初始化这个缓存数组。每个数组元素都存储了一个 <code>Integer</code> 对象。</p></li><li><p><strong>自动装箱</strong>：当使用 <code>Integer.valueOf(int)</code> 方法进行自动装箱时，如果传入的值在缓存范围内，会直接返回缓存数组中对应的 <code>Integer</code> 对象，而不是创建新的 <code>Integer</code> 对象。</p></li></ol><p>Byte,Short,Long的缓存范围与Integer一样，但不能通过JVM参数进行调整。Character的范围是0-127(代表ASCII字符集)，Boolean只有true和false</p></div><p>总结：</p><ul><li><strong><code>Integer</code> 缓存池</strong>：缓存了从 <code>-128</code> 到 <code>127</code> 范围内的 <code>Integer</code> 对象。在缓存范围内，<code>Integer.valueOf(int)</code> 会返回缓存中的对象。减少了对象的创建次数，提高了性能。</li><li><strong>注意事项</strong>：使用 <code>==</code> 比较 <code>Integer</code> 对象时需要注意缓存范围的影响，推荐使用 <code>equals</code> 方法进行值比较。</li></ul><h3 id="bigdecimal" tabindex="-1"><a class="header-anchor" href="#bigdecimal"><span>BigDecimal</span></a></h3>`,13)),a("p",null,[i[7]||(i[7]=e("什么是 Java 的 BigDecimal？ 参照：")),n(s,{to:"/java/syntax/base/Java%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93.html#_2-bigdecimal"},{default:l(()=>i[6]||(i[6]=[e("BigDecimal")])),_:1})]),i[16]||(i[16]=t(`<p><code>BigDecimal</code>是Java中用于进行高精度浮点数运算的工具类，适用于金融和科学计算等需要高精度的场景。</p><div class="hint-container warning"><p class="hint-container-title">BigDecimal</p><p>BigDecimal是不可变类，所有的算术运算都会返回新的BigDecimal对象（安全但性能较差）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;123.456&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 使用字符串初始化，推荐     </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 也可以使用静态方法 valueOf</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123.456</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 使用double初始化，可能丢失精度</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>常用算数方法：<code>add</code>, <code>subtract</code>, <code>multiply</code>, <code>divide</code></li><li>数值比较：<code>int res = bd3.compareTo(bd4)</code></li><li>转换为字符串： <ul><li><code>toString()</code> --可能会是科学记数法</li><li><code>toPlainString()</code> --始终提供完整的十进制字符串表示</li></ul></li></ul></div><h2 id="java字符串对象" tabindex="-1"><a class="header-anchor" href="#java字符串对象"><span>Java字符串对象</span></a></h2><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h3>`,4)),a("p",null,[i[9]||(i[9]=e("Java中处理字符串的主要类是String、StringBuilder和StringBuffer。 参考：")),n(s,{to:"/java/syntax/base/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2.html#%E4%B8%89-%E5%AD%97%E7%AC%A6%E4%B8%B2-string"},{default:l(()=>i[8]||(i[8]=[e("Java字符串")])),_:1})]),i[17]||(i[17]=t('<div class="hint-container info"><p class="hint-container-title">String面试题</p><h4 id="使用-new-string-abc-语句在-java-中会创建多少个对象" tabindex="-1"><a class="header-anchor" href="#使用-new-string-abc-语句在-java-中会创建多少个对象"><span>使用 new String(&quot;abc&quot;) 语句在 Java 中会创建多少个对象？</span></a></h4><p>会创建1-2两个字符串，使用new关键字时，如果字符串常量池中不存在当前字符串，那就会在堆上创建两个字符串对象，其中一个会被保存到字符串常量池中。</p><p>如果字符串常量池中已经存在该字符串的引用，则只会在堆中创建一个</p><h4 id="为什么-jdk-9-中将-string-的-char-数组改为-byte-数组" tabindex="-1"><a class="header-anchor" href="#为什么-jdk-9-中将-string-的-char-数组改为-byte-数组"><span>为什么 JDK 9 中将 String 的 char 数组改为 byte 数组？</span></a></h4><p>为了节省内存空间，提升内存利用率。</p><ul><li>JDK9之前String是基于char[] 实现的，内部采用UTF-16编码，每个字符占用两字节。</li><li>JDK9中String采用byte[]数组来实现，并使用coder变量标识编码方式(UTF-16/Latin-1)， 当字符仅需一个字符的空间时，就可以减少内存占用</li></ul></div><h3 id="stringbuilder" tabindex="-1"><a class="header-anchor" href="#stringbuilder"><span>StringBuilder</span></a></h3><p>Java 的 StringBuilder 是怎么实现的？</p><p><code>StringBuilder</code> 是 Java 中用于高效构建字符串的类，主要用于单线程环境。</p><div class="hint-container tip"><p class="hint-container-title">StringBuilder的实现原理</p><ol><li><strong>内部数据结构</strong>：<code>StringBuilder</code> 内部使用一个字符数组 <code>char[]</code> 来存储字符串数据。</li><li><strong>构造函数</strong>：提供了多种构造函数，包括无参构造函数（默认初始容量为 16）、带初始容量的构造函数、带字符串的构造函数和带 <code>CharSequence</code> 的构造函数。</li><li><strong>动态扩容</strong>：当内部字符数组空间不足时，会自动进行扩容。扩容策略是将当前容量翻倍再加 2，以确保有足够的空间存储新的数据。</li><li><strong>常见方法</strong>：<code>StringBuilder</code> 提供了丰富的字符串操作方法，如 <code>append</code>（追加数据）、<code>insert</code>（插入数据）、<code>delete</code>（删除数据）、<code>reverse</code>（反转字符串）和 <code>toString</code>（将 <code>StringBuilder</code> 转换为 <code>String</code> 对象）。</li></ol></div><p>通过这些设计，<code>StringBuilder</code> 在单线程环境中能够高效地构建和操作字符串，避免了频繁创建新的 <code>String</code> 对象带来的性能开销。</p><h3 id="stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuffer"><span>StringBuffer</span></a></h3><p>Java 中 String、StringBuffer 和 StringBuilder 的区别是什么？</p><ul><li>String: 不可变，适合少量字符串操作。<br> String的本质就是一个不可变的字符数组： <code>private final char value[];</code></li><li>StringBuilder: 可变，但非线程安全，适合单线程环境中的高性能字符串处理</li><li>StringBuffer：可变，且线程安全，适合多线程环境中频繁修改字符串的场景</li></ul><h3 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化"><span>序列化</span></a></h3><p>Java 中的序列化和反序列化是什么？</p><div class="hint-container info"><p class="hint-container-title">Java 中的序列化和反序列化</p><p>Java 中的序列化和反序列化是将对象的状态信息转换为可以存储或传输的形式，以及将字节流恢复为对象的过程。具体实现原理如下：</p><ol><li><p><strong>序列化</strong>：</p><ul><li><strong>标记接口</strong>：要使一个对象可以被序列化，该对象的类必须实现 <code>Serializable</code> 接口。<code>Serializable</code> 是一个标记接口，没有定义任何方法。</li><li><strong>默认序列化机制</strong>：Java 提供了默认的序列化机制，通过 <code>ObjectOutputStream</code> 类将对象写入输出流。</li><li><strong>自定义序列化</strong>：可以通过实现 <code>writeObject</code> 和 <code>readObject</code> 方法来自定义序列化和反序列化过程。</li></ul></li><li><p><strong>反序列化</strong>：</p><ul><li><strong>读取字节流</strong>：通过 <code>ObjectInputStream</code> 类从输入流中读取字节流并恢复对象。</li><li><strong>对象重建</strong>：反序列化过程中，Java 会重建对象的实例，并恢复其状态。</li></ul></li><li><p><strong>注意事项</strong>：</p><ul><li><strong><code>serialVersionUID</code></strong>：建议显式定义 <code>serialVersionUID</code>，以避免因类结构变化而导致的序列化失败。</li><li><strong>非序列化字段</strong>：使用 <code>transient</code> 关键字标记不想被序列化的字段。</li><li><strong>安全性</strong>：注意序列化和反序列化过程中可能存在安全风险，特别是当对象来自不可信来源时。可以通过使用 <code>ObjectInputFilter</code> 进行过滤来提高安全性。</li><li><strong>性能</strong>：序列化和反序列化过程可能会消耗较多资源，可以通过优化数据结构和使用更高效的序列化库来提高性能。</li><li><strong>继承</strong>：如果一个类实现了 <code>Serializable</code> 接口，其子类也会自动实现 <code>Serializable</code> 接口。如果父类没有实现 <code>Serializable</code> 接口，但子类实现了 <code>Serializable</code> 接口，那么父类的状态信息不会被序列化。</li></ul></li></ol></div><h3 id="乱码问题" tabindex="-1"><a class="header-anchor" href="#乱码问题"><span>乱码问题</span></a></h3><p>为什么在 Java 中编写代码时会遇到乱码问题？</p><p>乱码是因为<strong>编解码时使用的字符集不一致</strong>导致的。</p><h2 id="java面向对象" tabindex="-1"><a class="header-anchor" href="#java面向对象"><span>Java面向对象</span></a></h2><p>Java 面向对象编程与面向过程编程的区别是什么？</p><div class="hint-container tip"><p class="hint-container-title">面向对象编程（OOP）和面向过程编程（Procedural Programming）</p><ul><li><p><strong>面向对象编程</strong>：关注数据（对象）及其行为（方法），通过类和对象来组织代码。数据和操作数据的方法封装在一起，外部访问受限，增强数据安全性。支持继承和多态，可以通过继承扩展类的功能，多态允许子类方法覆盖父类方法。<strong>面向对象更符合人类的思维方式</strong>。</p></li><li><p><strong>面向过程编程</strong>：关注过程（函数）和数据，通过函数和数据结构来组织代码。数据和函数分离，数据暴露在外，容易被随意修改。</p></li></ul></div><h3 id="封装继承多态" tabindex="-1"><a class="header-anchor" href="#封装继承多态"><span>封装继承多态</span></a></h3><p>什么是 Java 的封装特性？</p><p>为什么 Java 不支持多重继承？</p><p>什么是 Java 中的继承机制？</p><p>什么是 Java 的多态特性？</p><h3 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符"><span>访问修饰符</span></a></h3><p>Java 中的访问修饰符有哪些？</p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><p>Java 中静态方法和实例方法的区别是什么？</p><p>Java 方法重载和方法重写之间的区别是什么？</p><h3 id="接口和抽象类" tabindex="-1"><a class="header-anchor" href="#接口和抽象类"><span>接口和抽象类</span></a></h3><p>接口和抽象类有什么区别？</p><h3 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝"><span>深浅拷贝</span></a></h3><p>Java 中的深拷贝和浅拷贝有什么区别？</p><h3 id="内部类" tabindex="-1"><a class="header-anchor" href="#内部类"><span>内部类</span></a></h3><p>什么是 Java 内部类？它有什么作用？</p><h3 id="object类" tabindex="-1"><a class="header-anchor" href="#object类"><span>Object类</span></a></h3><p>Java Object 类中有什么方法，有什么作用？</p><h3 id="hashcode-equals" tabindex="-1"><a class="header-anchor" href="#hashcode-equals"><span>hashCode/equals</span></a></h3><p>Java 中 hashCode 和 equals 方法是什么？它们与 == 操作符有什么区别？</p><p>Java 中的 hashCode 和 equals 方法之间有什么关系？</p><h3 id="不可变类" tabindex="-1"><a class="header-anchor" href="#不可变类"><span>不可变类</span></a></h3><p>什么是 Java 中的不可变类？</p><h2 id="io和网络编程" tabindex="-1"><a class="header-anchor" href="#io和网络编程"><span>IO和网络编程</span></a></h2><h3 id="io流" tabindex="-1"><a class="header-anchor" href="#io流"><span>IO流</span></a></h3><p>Java 的 I/O 流是什么？</p><h3 id="nio和aio" tabindex="-1"><a class="header-anchor" href="#nio和aio"><span>NIO和AIO</span></a></h3><p>什么是 BIO、NIO、AIO？</p><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel"><span>Channel</span></a></h3><p>什么是 Channel？</p><h3 id="selector" tabindex="-1"><a class="header-anchor" href="#selector"><span>Selector</span></a></h3><p>什么是 Selector？</p><h3 id="网络编程" tabindex="-1"><a class="header-anchor" href="#网络编程"><span>网络编程</span></a></h3><p>什么是 Java 的网络编程？</p><h2 id="java高级特性" tabindex="-1"><a class="header-anchor" href="#java高级特性"><span>Java高级特性</span></a></h2><h3 id="注解原理" tabindex="-1"><a class="header-anchor" href="#注解原理"><span>注解原理</span></a></h3><p>Java 中的注解原理是什么？</p><h3 id="反射及其应用" tabindex="-1"><a class="header-anchor" href="#反射及其应用"><span>反射及其应用</span></a></h3><p>你使用过 Java 的反射机制吗？如何应用反射？</p><h3 id="spi机制" tabindex="-1"><a class="header-anchor" href="#spi机制"><span>SPI机制</span></a></h3><p>什么是 Java 的 SPI（Service Provider Interface）机制？</p><h3 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h3><p>Java 泛型的作用是什么？</p><p>Java 泛型擦除是什么？</p><p>什么是 Java 泛型的上下界限定符？</p><h3 id="异常和错误" tabindex="-1"><a class="header-anchor" href="#异常和错误"><span>异常和错误</span></a></h3><p>Java 中 Exception 和 Error 有什么区别？</p><p>Java 运行时异常和编译时异常之间的区别是什么？</p><p>Java 中 final、finally 和 finalize 各有什么区别？</p><h3 id="jdk8新特性" tabindex="-1"><a class="header-anchor" href="#jdk8新特性"><span>JDK8新特性</span></a></h3><p>JDK8 有哪些新特性？</p><p>Java 的 Optional 类是什么？它有什么用？</p><h3 id="调用外部程序" tabindex="-1"><a class="header-anchor" href="#调用外部程序"><span>调用外部程序</span></a></h3><p>如何在 Java 中调用外部可执行程序或系统命令？</p>',72))])}const u=r(p,[["render",c],["__file","base.html.vue"]]),b=JSON.parse('{"path":"/interview/java/base.html","title":"Java基础面试题","lang":"en-US","frontmatter":{"order":1,"title":"Java基础面试题","description":"Java基础知识 Java的优势 你认为 Java 的优势是什么？ Java的优势 在过去Java因其 跨平台，垃圾回收，面向对象 等特点而流行起来，到现在形成了 成熟的生态 ，拥有完善的工具，框架和中间件，以及大量的专业人才，我觉得这才是Java现如今最大的优势和竞争力。 JDK与JRE JDK 和 JRE 有什么区别？你使用过哪些 JDK 提供的工...","head":[["meta",{"property":"og:url","content":"https://x.app/interview/java/base.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"Java基础面试题"}],["meta",{"property":"og:description","content":"Java基础知识 Java的优势 你认为 Java 的优势是什么？ Java的优势 在过去Java因其 跨平台，垃圾回收，面向对象 等特点而流行起来，到现在形成了 成熟的生态 ，拥有完善的工具，框架和中间件，以及大量的专业人才，我觉得这才是Java现如今最大的优势和竞争力。 JDK与JRE JDK 和 JRE 有什么区别？你使用过哪些 JDK 提供的工..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-16T12:42:31.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2024-11-16T12:42:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-16T12:42:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"Java基础知识","slug":"java基础知识","link":"#java基础知识","children":[{"level":3,"title":"Java的优势","slug":"java的优势","link":"#java的优势","children":[]},{"level":3,"title":"JDK与JRE","slug":"jdk与jre","link":"#jdk与jre","children":[]},{"level":3,"title":"for/foreach","slug":"for-foreach","link":"#for-foreach","children":[]},{"level":3,"title":"Iterator","slug":"iterator","link":"#iterator","children":[]},{"level":3,"title":"参数传递","slug":"参数传递","link":"#参数传递","children":[]}]},{"level":2,"title":"Java数据类型","slug":"java数据类型","link":"#java数据类型","children":[{"level":3,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[]},{"level":3,"title":"包装类型","slug":"包装类型","link":"#包装类型","children":[]},{"level":3,"title":"装箱和拆箱","slug":"装箱和拆箱","link":"#装箱和拆箱","children":[]},{"level":3,"title":"Integer缓存池","slug":"integer缓存池","link":"#integer缓存池","children":[]},{"level":3,"title":"BigDecimal","slug":"bigdecimal","link":"#bigdecimal","children":[]}]},{"level":2,"title":"Java字符串对象","slug":"java字符串对象","link":"#java字符串对象","children":[{"level":3,"title":"String","slug":"string","link":"#string","children":[]},{"level":3,"title":"StringBuilder","slug":"stringbuilder","link":"#stringbuilder","children":[]},{"level":3,"title":"StringBuffer","slug":"stringbuffer","link":"#stringbuffer","children":[]},{"level":3,"title":"序列化","slug":"序列化","link":"#序列化","children":[]},{"level":3,"title":"乱码问题","slug":"乱码问题","link":"#乱码问题","children":[]}]},{"level":2,"title":"Java面向对象","slug":"java面向对象","link":"#java面向对象","children":[{"level":3,"title":"封装继承多态","slug":"封装继承多态","link":"#封装继承多态","children":[]},{"level":3,"title":"访问修饰符","slug":"访问修饰符","link":"#访问修饰符","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":3,"title":"接口和抽象类","slug":"接口和抽象类","link":"#接口和抽象类","children":[]},{"level":3,"title":"深浅拷贝","slug":"深浅拷贝","link":"#深浅拷贝","children":[]},{"level":3,"title":"内部类","slug":"内部类","link":"#内部类","children":[]},{"level":3,"title":"Object类","slug":"object类","link":"#object类","children":[]},{"level":3,"title":"hashCode/equals","slug":"hashcode-equals","link":"#hashcode-equals","children":[]},{"level":3,"title":"不可变类","slug":"不可变类","link":"#不可变类","children":[]}]},{"level":2,"title":"IO和网络编程","slug":"io和网络编程","link":"#io和网络编程","children":[{"level":3,"title":"IO流","slug":"io流","link":"#io流","children":[]},{"level":3,"title":"NIO和AIO","slug":"nio和aio","link":"#nio和aio","children":[]},{"level":3,"title":"Channel","slug":"channel","link":"#channel","children":[]},{"level":3,"title":"Selector","slug":"selector","link":"#selector","children":[]},{"level":3,"title":"网络编程","slug":"网络编程","link":"#网络编程","children":[]}]},{"level":2,"title":"Java高级特性","slug":"java高级特性","link":"#java高级特性","children":[{"level":3,"title":"注解原理","slug":"注解原理","link":"#注解原理","children":[]},{"level":3,"title":"反射及其应用","slug":"反射及其应用","link":"#反射及其应用","children":[]},{"level":3,"title":"SPI机制","slug":"spi机制","link":"#spi机制","children":[]},{"level":3,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":3,"title":"异常和错误","slug":"异常和错误","link":"#异常和错误","children":[]},{"level":3,"title":"JDK8新特性","slug":"jdk8新特性","link":"#jdk8新特性","children":[]},{"level":3,"title":"调用外部程序","slug":"调用外部程序","link":"#调用外部程序","children":[]}]}],"git":{"createdTime":1731760951000,"updatedTime":1731760951000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":14.53,"words":4358},"filePathRelative":"interview/java/base.md","localizedDate":"November 16, 2024","autoDesc":true}');export{u as comp,b as data};
